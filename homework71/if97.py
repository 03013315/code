I = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
     2, 3, 3, 3, 4, 4, 4, 5, 8, 8, 21, 23, 29, 30, 31, 32]
J = [-2, -1, 0, 1, 2, 3, 4, 5, -9, -7, -1, 0, 1, 3, -3, 0, 1, 3, 17, -4,
       0, 6, -5, -2, 10, -8, -11, -6, -29, -31, -38, -39, -40, -41]
N = [0.14632971213167, -0.84548187169114, -3.7563603672040, 3.3855169168385, -0.95791963387872, 0.15772038513228, -0.016616417199501, 0.00081214629983568, 0.00028319080123804, -0.00060706301565874, -0.018990068218419, -0.032529748770505, -0.021841717175414, -0.000052838357969930, -0.00047184321073267, -0.00030001780793026, 0.000047661393906987, -0.0000044141845330846, -0.00000000000000072694996297594, -0.000031679644845054, -
     0.0000028270797985312, -0.00000000085205128120103, -0.0000022425281908000, -0.00000065171222895601, -0.00000000000014341729937924, -0.00000040516996860117, -0.0000000012734301741641, -0.00000000017424871230634, -0.00000000000000000068762131295531, 0.000000000000000000014478307828521, 0.000000000000000000000026335781662795, -0.000000000000000000000011947622640071, 0.0000000000000000000000018228094581404, -0.000000000000000000000000093537087292458]
I3a = [0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 6, 7, 8, 10, 10, 14, 18, 20, 22, 22, 24, 28, 28, 32, 32]
J3a = [ 0, 1, 5,0,3,4,8,14,6,16,0,2,3,0,1,4,5,28,28,24,1,32,36,22,28,36,16,28,36,16,36,10,28]
N3a = [ 0.770889828326934e1 , -0.260835009128688e2 , 0.267416218930389e3 , 0.172221089496844e2 , -0.293542332145970e3 , 0.614135601882478e3 , -0.610562757725674e5 , -0.651272251118219e8 , 0.735919313521937e5 , -0.116646505914191e11 , 0.355267086434461e2 , -0.596144543825955e3 , -0.475842430145708e3 , 0.696781965359503e2 , 0.335674250377312e3 , 0.250526809130882e5 , 0.146997380630766e6 , 0.538069315091534e20 , 0.143619827291346e22 , 0.364985866165994e20 , -0.254741561156775e4 , 0.240120197096563e28 ,
      -0.393847464679496e30 , 0.147073407024852e25 , -0.426391250432059e32 , 0.194509340621077e39 , 0.666212132114896e24 , 0.706777016552858e34 , 0.175563621975576e42 , 0.108408607429124e29 , 0.730872705175151e44 , 0.159145847398870e25 , 0.377121605943324e41]
Px = 16.53
Tx = 1386
R = 0.461526
px1 = 99
hx1 = 2300
sx1 = 4.4

def garma(p, t):
    pi = p / Px
    tao = Tx / t
    r = 0
    for i in range(1, 35):
        r += N[i - 1] * (7.1 - pi)**I[i - 1] * (tao - 1.222)**J[i - 1]
    return r


def garmapi(p, t):
    pi = p / Px
    tao = Tx / t
    rp = 0
    for i in range(1, 35):
        rp -= N[i - 1] * I[i - 1] * (7.1 - pi)**(I[i - 1] - 1) * (tao - 1.222)**J[i - 1]
    return rp


def garmapipi(p, t):
    pi = p / Px
    tao = Tx / t
    rpp = 0
    for i in range(1, 35):
        rpp += N[i - 1] * I[i - 1] * (I[i - 1] - 1) * \
            (7.1 - pi)**(I[i - 1] - 2) * (tao - 1.222)**J[i - 1]
    return rpp


def garmatao(p, t):
    pi = p / Px
    tao = Tx / t
    rt = 0
    for i in range(1, 35):
        rt += N[i - 1] * (7.1 - pi)**I[i - 1] * J[i - 1] * (tao - 1.222)**(J[i - 1] - 1)
    return rt


def garmataotao(p, t):
    pi = p / Px
    tao = Tx / t
    rtt = 0
    for i in range(1, 35):
        rtt += N[i - 1] * (7.1 - pi)**I[i - 1] * J[i - 1] * \
            (J[i - 1] - 1) * (tao - 1.222)**(J[i - 1] - 2)
    return rtt


def garmapitao(p, t):
    pi = p / Px
    tao = Tx / t
    rpt = 0
    for i in range(1, 35):
        rpt -= N[i - 1] * I[i - 1] * (7.1 - pi)**(I[i - 1] - 1) * \
            J[i - 1] * (tao - 1.222)**(J[i - 1] - 1)
    return rpt


def SpecificVolume(p, t):
    pi = p / Px
    v = pi * garmapi(p, t) * R * t / (p * 1000)
    return v


def SpecificInternalEnergy(p, t):
    pi = p / Px
    tao = Tx / t
    u = (tao * garmatao(p, t) - pi * garmapi(p, t)) * R * t
    return u


def SpecificEntropy(p, t):
    tao = Tx / t
    s = (tao * garmatao(p, t) - garma(p, t)) * R
    return s


def SpecificEnthalpy(p, t):
    tao = Tx / t
    h = tao * garmatao(p, t) * R * t
    return h


def SpecificIsobaricHeatCapacity(p, t):
    tao = Tx / t
    cp = - tao**2 * garmataotao(p, t) * R
    return cp


def SpeedOfSound(p, t):
    tao = Tx / t
    part1 = garmapi(p, t)**2
    part2 = garmapi(p, t) - tao * garmapitao(p, t)
    part3 = part2**2
    part4 = tao**2 * garmataotao(p, t)
    part5 = part3 / part4
    w = (part1 * R * t * 1000 / (part5 - garmapipi(p, t)))**0.5
    return w


def supplement_phs_3a(h, s):
    n = h / hx1
    o = s / sx1
    pi = 0
    for i in range(1, 34):
        pi += N3a[i - 1]*(n-1.01)**(I3a[i - 1]) * (o-0.750) ** (J3a[i - 1])
    p3a = px1 * pi
    return p3a